// Mocks generated by Mockito 5.4.6 from annotations
// in pet_finder_app/test/widget/pet_card_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pet_finder_app/features/pets/data/repositories/pet_repository.dart'
    as _i2;
import 'package:pet_finder_app/features/pets/presentation/cubit/favorites_cubit.dart'
    as _i3;
import 'package:pet_finder_app/features/pets/presentation/cubit/pets_cubit.dart'
    as _i7;
import 'package:pet_finder_app/features/pets/presentation/cubit/pets_state.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePetRepository_0 extends _i1.SmartFake implements _i2.PetRepository {
  _FakePetRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFavoritesState_1 extends _i1.SmartFake
    implements _i3.FavoritesState {
  _FakeFavoritesState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePetsState_2 extends _i1.SmartFake implements _i4.PetsState {
  _FakePetsState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FavoritesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesCubit extends _i1.Mock implements _i3.FavoritesCubit {
  MockFavoritesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PetRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakePetRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.PetRepository);

  @override
  _i3.FavoritesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeFavoritesState_1(this, Invocation.getter(#state)),
          )
          as _i3.FavoritesState);

  @override
  _i5.Stream<_i3.FavoritesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i3.FavoritesState>.empty(),
          )
          as _i5.Stream<_i3.FavoritesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i5.Future<void> loadFavorites() =>
      (super.noSuchMethod(
            Invocation.method(#loadFavorites, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<int?> addFavorite(String? imageId) =>
      (super.noSuchMethod(
            Invocation.method(#addFavorite, [imageId]),
            returnValue: _i5.Future<int?>.value(),
          )
          as _i5.Future<int?>);

  @override
  _i5.Future<void> removeFavorite(int? favoriteId) =>
      (super.noSuchMethod(
            Invocation.method(#removeFavorite, [favoriteId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  bool isFavorite(String? imageId) =>
      (super.noSuchMethod(
            Invocation.method(#isFavorite, [imageId]),
            returnValue: false,
          )
          as bool);

  @override
  void emit(_i3.FavoritesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i3.FavoritesState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [PetsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPetsCubit extends _i1.Mock implements _i7.PetsCubit {
  MockPetsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PetRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakePetRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.PetRepository);

  @override
  _i4.PetsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePetsState_2(this, Invocation.getter(#state)),
          )
          as _i4.PetsState);

  @override
  _i5.Stream<_i4.PetsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i4.PetsState>.empty(),
          )
          as _i5.Stream<_i4.PetsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i5.Future<void> loadPets() =>
      (super.noSuchMethod(
            Invocation.method(#loadPets, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> search(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#search, [query]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addFavorite(String? imageId) =>
      (super.noSuchMethod(
            Invocation.method(#addFavorite, [imageId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removeFavorite(String? imageId) =>
      (super.noSuchMethod(
            Invocation.method(#removeFavorite, [imageId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void emit(_i4.PetsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i4.PetsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
